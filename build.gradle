plugins {
    id "eclipse"
    id "maven-publish"
    id "net.minecraftforge.gradle" version "5.1.+"
    id "org.parchmentmc.librarian.forgegradle" version "1.+"
}

version = "${mod_version}-${minecraft_version}"
group = "net.goodmodsmodding.${mod_id}"
archivesBaseName = mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty "java.version"}, JVM: ${System.getProperty "java.vm.version"} (${System.getProperty "java.vendor"}), Arch: ${System.getProperty "os.arch"}"
minecraft {
    mappings channel: mappings_channel, version: mappings_version

    runs {
        client {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"

            property "forge.logging.console.level", "debug"

            property "forge.enabledGameTestNamespaces", mod_id

            if (project.hasProperty("mc_uuid")) {
                args "--uuid", project.getProperty("mc_uuid")
            }
            if (project.hasProperty("mc_username")) {
                args "--username", project.getProperty("mc_username")
            }
            if (project.hasProperty("mc_accessToken")) {
                args "--accessToken", project.getProperty("mc_accessToken")
            }

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"

            property "forge.logging.console.level", "debug"

            property "forge.enabledGameTestNamespaces", mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"

            property "forge.logging.console.level", "debug"

            property "forge.enabledGameTestNamespaces", mod_id

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"

            property "forge.logging.console.level", "debug"

            args "--mod", mod_id, "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/")

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources {
    srcDir "src/generated/resources"
}

repositories {
    maven {
        name = "Progwml6 Maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = "Curse Maven"
        url = "https://cursemaven.com"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    implementation fg.deobf("curse.maven:configured-457570:4166861")
    implementation fg.deobf("curse.maven:catalogue-459701:4171025")
}

def resourceTargets = ["META-INF/mods.toml", "pack.mcmeta"]
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [authors: authors, data_pack_format: data_pack_format, description: description, credits: credits, forge_version_range: forge_version_range, license: license, minecraft_version_range: minecraft_version_range, mod_id: mod_id, mod_name: mod_name, mod_version: mod_version, resource_pack_format: resource_pack_format]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put "project", project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": authors,
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": mod_version,
                "Implementation-Vendor": authors,
                "Implementation-Timestamp": new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

jar.finalizedBy("reobfJar")

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            name = "MCModsRepo"
            url = "file://${project.projectDir}/mcmodsrepo"
        }
    }
}
